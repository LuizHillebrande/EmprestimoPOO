import java.util.Scanner;
import java.util.List;
import java.util.ArrayList;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;

public class Main {
    private static List<Equipment> equipmentList = new ArrayList<>();
    private static List<Loan> loans = new ArrayList<>();
    private static User loggedInUser = null;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        List<User> users = new ArrayList<>();

        while (true) {
            printTitle();
            System.out.println("1. Cadastrar Usuário");
            System.out.println("2. Fazer Login");
            System.out.println("3. Sair");

            System.out.print("[ENTER]: ");
            int option = readInt(sc);
            sc.nextLine(); // Consome o ENTER
            clean();

            switch (option) {
                case 1:
                    cadaster(sc, users);
                    break;
                case 2:
                    if (login(sc, users)) {
                        userMenu(sc, users);
                    }
                    break;
                case 3:
                    System.out.println("Saindo do sistema...");
                    sc.close();
                    return;
                default:
                    System.out.println("[Aviso: Opção inválida.]");
            }
            clean();
        }
    }

    public static void userMenu(Scanner sc, List<User> users) {
        while (true) {
            printTitle();
            System.out.println("1. Cadastrar Equipamento");
            System.out.println("2. Emprestar Equipamento");
            System.out.println("3. Devolver Equipamento");
            System.out.println("4. Listar Equipamentos Disponíveis");
            System.out.println("5. Listar Equipamentos Emprestados");
            System.out.println("6. Sair");

            System.out.print("[ENTER]: ");
            int option = readInt(sc);
            sc.nextLine(); // Consome o ENTER
            clean();

            switch (option) {
                case 1:
                    registerEquipment(sc);
                    break;
                case 2:
                    borrowEquipment(sc, users);
                    break;
                case 3:
                    returnEquipment(sc, users);
                    break;
                case 4:
                    listEquipment();
                    break;
                case 5:
                    listBorrowedItems(); // Nova opção para listar objetos emprestados
                    break;
                case 6:
                    System.out.println("Desconectando...");
                    loggedInUser = null;
                    return;
                default:
                    System.out.println("[Aviso: Opção inválida.]");
            }
            clean();
        }
    }

    public static boolean login(Scanner sc, List<User> users) {
        System.out.print("Nome: ");
        String name = sc.nextLine();
        
        System.out.print("Senha: ");
        String password = sc.nextLine();

        for (User user : users) {
            if (user.getName().equalsIgnoreCase(name) && user instanceof Account) {
                Account account = (Account) user;
                if (account.getPassword().equals(password)) {
                    loggedInUser = account;
                    System.out.println("[Aviso: Login bem-sucedido!]");
                    return true;
                }
            }
        }

        System.out.println("[Aviso: Nome ou senha inválidos.]");
        return false;
    }

    public static void printTitle() {
        System.out.println("= = = = = = = = = = =");
        System.out.println("Gestão de Biblioteca");
        System.out.println("= = = = = = = = = = =\n");
    }

    public static void clean() {
        System.out.print("\n".repeat(20));
    }

    public static void cadaster(Scanner sc, List<User> users) {
        System.out.print("Nome: ");
        String name = sc.nextLine();
        while (name.isEmpty()) {
            System.out.println("[Aviso: O nome está vazio, preencha o nome.]");
            System.out.print("Nome: ");
            name = sc.nextLine();
        }

        System.out.print("Email: ");
        String email = sc.nextLine();
        while (!email.matches("^[^@]+@gmail\\.com$")) {
            System.out.println("[Aviso: Seu e-mail é inválido, insira novamente...]");
            System.out.print("Email: ");
            email = sc.nextLine();
        }

        System.out.print("CPF: ");
        String cpf = sc.nextLine();
        while (!isValidCPF(cpf) || cpfExists(users, cpf)) {
            if (!isValidCPF(cpf)) {
                System.out.println("[Aviso: Seu CPF é inválido, insira novamente...]");
            } else {
                System.out.println("[Aviso: CPF já cadastrado, insira outro...]");
            }
            System.out.print("CPF: ");
            cpf = sc.nextLine();
        }

        System.out.print("Senha: ");
        String password = sc.nextLine();

        Account newAccount = new Account(name, email, cpf, password);
        users.add(newAccount);
        newAccount.displayInfo();
        System.out.println("[Aviso: Usuário criado!]");
    }

    public static boolean isValidCPF(String cpf) {
        return cpf.matches("\\d{11}");
    }

    public static boolean cpfExists(List<User> users, String cpf) {
        for (User user : users) {
            if (user.getCPF().equals(cpf)) {
                return true;
            }
        }
        return false;
    }

    public static void registerEquipment(Scanner sc) {
        System.out.print("Nome do Equipamento: ");
        String equipmentName = sc.nextLine();

        System.out.println("Selecione o estado do equipamento:");
        System.out.println("1. Novo");
        System.out.println("2. Usado");
        System.out.println("3. Em manutenção");

        int stateOption = readInt(sc);
        Equipment.EquipmentState state;

        switch (stateOption) {
            case 1:
                state = Equipment.EquipmentState.NEW;
                break;
            case 2:
                state = Equipment.EquipmentState.USED;
                break;
            case 3:
                state = Equipment.EquipmentState.MAINTENANCE;
                break;
            default:
                System.out.println("[Aviso: Opção inválida. Equipamento definido como Usado.]");
                state = Equipment.EquipmentState.USED;
        }

        Equipment newEquipment = new Equipment(equipmentName, state);
        equipmentList.add(newEquipment);
        System.out.println("[Aviso: Equipamento " + equipmentName + " cadastrado com sucesso!]");
    }

    public static void listEquipment() {
        if (equipmentList.isEmpty()) {
            System.out.println("[Aviso: Não há equipamentos cadastrados.]");
            return;
        }

        System.out.println("Equipamentos disponíveis para empréstimo:");
        for (Equipment equipment : equipmentList) {
            equipment.displayInfo();
        }
    }

    public static void borrowEquipment(Scanner sc, List<User> users) {
        if (equipmentList.isEmpty()) {
            System.out.println("[Aviso: Não há equipamentos cadastrados.]");
            return;
        }

        if (loggedInUser == null) {
            System.out.println("[Aviso: Você precisa fazer login primeiro.]");
            return;
        }

        System.out.println("Equipamentos disponíveis:");
        for (Equipment equipment : equipmentList) {
            if (equipment.isAvailable()) {
                System.out.println("- " + equipment.getName());
            }
        }

        System.out.print("Escolha um equipamento para emprestar: ");
        String equipmentName = sc.nextLine();

        for (Equipment equipment : equipmentList) {
            if (equipment.getName().equalsIgnoreCase(equipmentName) && equipment.isAvailable()) {
                equipment.borrow();

                LocalDate returnDate = null;
                while (returnDate == null) {
                    System.out.print("Digite a data de devolução (formato: dd/MM/yyyy): ");
                    String dateInput = sc.nextLine();
                    try {
                        returnDate = LocalDate.parse(dateInput, DateTimeFormatter.ofPattern("dd/MM/yyyy"));
                        if (returnDate.isBefore(LocalDate.now())) {
                            System.out.println("[Aviso: A data de devolução não pode ser anterior a hoje.]");
                            returnDate = null;
                        }
                    } catch (DateTimeParseException e) {
                        System.out.println("[Aviso: Formato de data inválido. Tente novamente.]");
                    }
                }

                Loan loan = new Loan(equipment, loggedInUser, returnDate);
                loans.add(loan);
                System.out.println("[Aviso: Empréstimo realizado com sucesso!]");
                return;
            }
        }

        System.out.println("[Aviso: Equipamento não encontrado ou não disponível.]");
    }

    public static void returnEquipment(Scanner sc, List<User> users) {
        if (loans.isEmpty()) {
            System.out.println("[Aviso: Não há empréstimos registrados.]");
            return;
        }

        System.out.println("Equipamentos emprestados:");
        for (Loan loan : loans) {
            if (loan.getUser().equals(loggedInUser)) {
                System.out.println("- " + loan.getEquipment().getName());
            }
        }

        System.out.print("Digite o nome do equipamento para devolver: ");
        String equipmentName = sc.nextLine();

        for (Loan loan : loans) {
            if (loan.getEquipment().getName().equalsIgnoreCase(equipmentName) && loan.getUser().equals(loggedInUser)) {
                loan.getEquipment().returnEquipment();
                loans.remove(loan);
                System.out.println("[Aviso: Equipamento devolvido com sucesso!]");
                return;
            }
        }

        System.out.println("[Aviso: Equipamento não encontrado nos empréstimos.]");
    }

    public static void listBorrowedItems() {
        if (loans.isEmpty()) {
            System.out.println("[Aviso: Não há empréstimos registrados.]");
            return;
        }

        System.out.println("Objetos emprestados:");
        for (Loan loan : loans) {
            System.out.println("- " + loan.getEquipment().getName() + " está com " + loan.getUser().getName());
        }
    }

    public static int readInt(Scanner sc) {
        while (true) {
            try {
                return Integer.parseInt(sc.nextLine());
            } catch (NumberFormatException e) {
                System.out.println("[Aviso: Por favor, insira um número válido.]");
            }
        }
    }
}
